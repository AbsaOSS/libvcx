name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"

jobs:
  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      CACHE_KEY_POOL: ${{ steps.mainstep.outputs.CACHE_KEY_POOL }}
      CACHE_KEY_ANDROID: ${{ steps.mainstep.outputs.CACHE_KEY_ANDROID }}
      CACHE_KEY_LIBVCX: ${{ steps.mainstep.outputs.CACHE_KEY_LIBVCX }}
      CACHE_KEY_CODECOV: ${{ steps.mainstep.outputs.CACHE_KEY_CODECOV }}
      CACHE_KEY_ALPINE_CORE: ${{ steps.mainstep.outputs.CACHE_KEY_ALPINE_CORE }}
      DOCKER_IMG_NAME_POOL: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_POOL }}
      DOCKER_IMG_NAME_ANDROID: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_ANDROID }}
      DOCKER_IMG_NAME_AGENCY: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_AGENCY }}
      DOCKER_IMG_NAME_LIBVCX: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_LIBVCX }}
      DOCKER_IMG_NAME_CODECOV: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_CODECOV }}
      DOCKER_IMG_NAME_ALPINE_CORE: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_ALPINE_CORE }}
      PUBLISH_VERSION: ${{ steps.mainstep.outputs.PUBLISH_VERSION }}
      RELEASE: ${{ steps.mainstep.outputs.RELEASE }}
      PRERELEASE: ${{ steps.mainstep.outputs.PRERELEASE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.45.2
      - name: Set outputs
        id: mainstep
        run: |
          set -x

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash

          if [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            REPO_HEAD="${{ github.event.pull_request.head.repo.full_name }}" # source repository
            REPO_BASE="${{ github.event.pull_request.head.base.full_name }}" # target repository
            echo "This is pull request from $REPO_HEAD to $REPO_BASE"

            if [[ "$REPO_HEAD" == "${{ github.repository }}" ]]
            then
              echo "This CI run is PR from non-forked repository."
              IS_FORK="false";
            else
              echo "This is fork."
              IS_FORK="true";
            fi;
          else
            echo "Not PR so this is not fork."
            IS_FORK="false";
          fi;

          REPO_VERSION_MOST_RECENT=$(git describe --tags --always --abbrev=0)
          REPO_VERSION_DESIRED=$(cargo pkgid --manifest-path libvcx/Cargo.toml | cut -d# -f2 | cut -d: -f2)
          echo "Highest released version was: $REPO_VERSION_MOST_RECENT, desired version (specified in libvcx/Cargo.toml) is $REPO_VERSION_DESIRED"

          RELEASE="false"
          PRERELEASE="false"
          if [[ "$IS_FORK" == "false" ]]
          then
            if [[ "$REPO_VERSION_DESIRED" != "$REPO_VERSION_MOST_RECENT" ]]
            then
              if [[ "$BRANCH_NAME" == "master" ]]
              then
                PUBLISH_VERSION="$REPO_VERSION_DESIRED"
                RELEASE="true"
                echo "This is push to master, and version was bumped from $REPO_VERSION_MOST_RECENT to $REPO_VERSION_DESIRED. Will publish a release of $REPO_VERSION_DESIRED."
              elif [[ "${{ github.event_name }}" == "pull_request" ]]
              then
                PUBLISH_VERSION="$REPO_VERSION_MOST_RECENT-${{ github.run_number }}"
                PRERELEASE="true"
                echo "This is push to a non-master branch on a PR, and version was bumped from $REPO_VERSION_MOST_RECENT to $REPO_VERSION_DESIRED. Will publish a pre-release of $REPO_VERSION_DESIRED."
              fi;
            else
              PUBLISH_VERSION="$REPO_VERSION_MOST_RECENT-$BRANCH_NAME-${{ github.run_number }}"
              if [[ "${{ github.event_name }}" == "pull_request" && ${{ contains(github.event.pull_request.labels.*.name, 'pre-release') }} ]]
              then
                PRERELEASE="true" 
                echo "This is a PR with `pre-release` label set. Will publish and prerelease version: $PUBLISH_VERSION."
              else
                echo "This is not push to master. Will be publishing version: $PUBLISH_VERSION."
              fi;
            fi;
          else
            echo "This PR is from fork, nothing will be published because the CI wouldn't be able to access repo secrets to perform publish."
            PUBLISH_VERSION=""
          fi;

          LIBVCX_SOURCE_HASH=${{ hashFiles('libvcx') }}
          LIBVCX_DOCKERFILE_HASH=${{ hashFiles('ci/libvcx.dockerfile') }}
          CODECOV_DOCKERFILE_HASH=${{ hashFiles('ci/libvcx-ubuntu.dockerfile') }}
          LIBVCX_NODE_WRAPPERS_HASH=${{ hashFiles('wrappers/node') }}
          LIBVCX_NODE_AGENT_HASH=${{ hashFiles('agents/node') }}
          AGENCY_CLIENT_HASH=${{ hashFiles('agency_client') }}
          JAVA_WRAPPERS_HASH=${{ hashFiles('wrappers/java') }}
          POOL_DOCKERFILE_HASH=${{ hashFiles('ci/indy-pool.dockerfile')}}
          ALPINE_CORE_HASH=${{ hashFiles('ci/alpine_core.dockerfile')}}

          LIBVCX_HASH=${LIBVCX_SOURCE_HASH:0:11}-${LIBVCX_NODE_WRAPPERS_HASH:0:11}-${LIBVCX_NODE_AGENT_HASH:0:11}-${LIBVCX_DOCKERFILE_HASH:0:11}-${AGENCY_CLIENT_HASH:0:11}
          CODECOV_HASH=${LIBVCX_SOURCE_HASH:0:23}-${CODECOV_DOCKERFILE_HASH:0:23}
          ANDROID_HASH=${LIBVCX_SOURCE_HASH:0:15}-${JAVA_WRAPPERS_HASH:0:15}
          POOL_HASH=${POOL_DOCKERFILE_HASH:0:15}

          set -x
          echo "::set-output name=PUBLISH_VERSION::$PUBLISH_VERSION"
          echo "::set-output name=RELEASE::$RELEASE"
          echo "::set-output name=PRERELEASE::$PRERELEASE"

          echo "::set-output name=CACHE_KEY_LIBVCX::$LIBVCX_HASH"
          echo "::set-output name=CACHE_KEY_CODECOV::$CODECOV_HASH"
          echo "::set-output name=CACHE_KEY_ANDROID::$ANDROID_HASH"
          echo "::set-output name=CACHE_KEY_POOL::$POOL_HASH"
          echo "::set-output name=CACHE_KEY_ALPINE_CORE::$ALPINE_CORE_HASH"

          echo "::set-output name=DOCKER_IMG_NAME_ALPINE_CORE::alpine-core"
          echo "::set-output name=DOCKER_IMG_NAME_AGENCY::docker.pkg.github.com/absaoss/vcxagencynode/vcxagency-node:0.1.2"
          echo "::set-output name=DOCKER_IMG_NAME_ANDROID::android-test"
          echo "::set-output name=DOCKER_IMG_NAME_LIBVCX::libvcx:$LIBVCX_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_CODECOV::codecov:$CODECOV_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_POOL::indypool:$POOL_HASH"

  build-image-alpine-core:
    needs: workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_ALPINE_CORE: ${{ needs.workflow-setup.outputs.CACHE_KEY_ALPINE_CORE }}
      DOCKER_IMG_NAME_ALPINE_CORE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_ALPINE_CORE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image-alpinecore
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache_alpine_core
          key: ${{ env.CACHE_KEY_ALPINE_CORE }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image-alpinecore.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build --build-arg "USER_ID=$UID" \
                       -f ci/alpine_core.dockerfile \
                       -t "$DOCKER_IMG_NAME_ALPINE_CORE" \
                        .
          mkdir -p /tmp/imgcache_alpine_core
          docker save "$DOCKER_IMG_NAME_ALPINE_CORE" > /tmp/imgcache_alpine_core/img_alpine_core.rar

      - name: Load alpine_core image from cache
        run: |
          docker load < /tmp/imgcache_alpine_core/img_alpine_core.rar
      - name: Verify alpine_core image was loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$DOCKER_IMG_NAME_ALPINE_CORE" || { echo "Image $DOCKER_IMG_NAME_ALPINE_CORE was not found!" ; exit 1; }

  build-image-libvcx:
    needs: [workflow-setup, build-image-alpine-core]
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_LIBVCX: ${{ needs.workflow-setup.outputs.CACHE_KEY_LIBVCX }}
      DOCKER_IMG_NAME_LIBVCX: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBVCX }}
      CACHE_KEY_ALPINE_CORE: ${{ needs.workflow-setup.outputs.CACHE_KEY_ALPINE_CORE }}
      DOCKER_IMG_NAME_ALPINE_CORE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_ALPINE_CORE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image-alpinecore
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache_alpine_core
          key: ${{ env.CACHE_KEY_ALPINE_CORE }}
      - name: If alpine_core NOT found in cache, error
        if: steps.cache-image-alpinecore.outputs.cache-hit != 'true'
        run: exit -1
      - name: Load alpine_core image from cache
        run: |
          docker load < /tmp/imgcache_alpine_core/img_alpine_core.rar
          rm /tmp/imgcache_alpine_core/img_alpine_core.rar
      - name: Try load from cache.
        id: cache-image-libvcx
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBVCX }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image-libvcx.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build --build-arg "ALPINE_CORE_IMAGE=$DOCKER_IMG_NAME_ALPINE_CORE" \
                       -f ci/libvcx.dockerfile \
                       -t "$DOCKER_IMG_NAME_LIBVCX" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_LIBVCX" > /tmp/imgcache/img_libvcx.rar

      - name: Load libvcx image from cache
        run: |
          docker load < /tmp/imgcache/img_libvcx.rar
      - name: Verify libvcx image was loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$DOCKER_IMG_NAME_LIBVCX" || { echo "Image $DOCKER_IMG_NAME_LIBVCX was not found!" ; exit 1; }

  # TODO: Add tests of iOS build
  publish-ios-wrapper:
    needs: [workflow-setup, build-image-libvcx]
    runs-on: macos-10.15
    env:
      LIBVCX_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: Switch to xcode version 11
      run: |
        sudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer
        xcodebuild -version
    - name: Build iOS wrapper
      run: |
          ./wrappers/ios/ci/build.sh || true
          echo START OF CAT
          cat /tmp/artifacts/OpenSSL-for-iPhone/bin/iPhoneSimulator13.7-x86_64.sdk/build-openssl-1.0.2t.log
          echo END OF CAT
    - uses: actions/upload-artifact@v2
      with:
        name: libvcx-ios-${{ env.PUBLISH_VERSION }}-device
        path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-device.zip
    - uses: actions/upload-artifact@v2
      with:
        name: libvcx-ios-${{ env.PUBLISH_VERSION }}-universal
        path: /tmp/artifacts/libvcx-ios-${{ env.PUBLISH_VERSION }}-universal.zip
